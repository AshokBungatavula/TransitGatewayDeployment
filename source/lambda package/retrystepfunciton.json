{
  "Comment": "A Retry example of the Amazon States Language using an AWS Lambda Function",
  "StartAt": "HelloWorld",
  "States": {
    "HelloWorld": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME",
      "Retry": [
        {
          "ErrorEquals": ["CustomError"],
          "IntervalSeconds": 1,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        },
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 30,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        },
        {
          "ErrorEquals": ["States.ALL"],
          "IntervalSeconds": 5,
          "MaxAttempts": 5,
          "BackoffRate": 2.0
        }
      ],
      "End": true
    }
  }
}

          - '"CreateNewPaGroup": {'
          - '"Type" : "Task",'
          - !Sub '"Resource" : "${CreateNewPaGroup.Arn}",'
          - '"Next": "CheckStackStatus"'
          - '},'
          - '"CheckStackStatus": {'
          - '"Type" : "Task",'
          - !Sub '"Resource" : "${CheckStackStatus.Arn}",'
          - '"Next": "CheckStatusChoiceState"'
          - '},'
          - '"CheckStatusChoiceState": {'
          - '"Type" : "Choice",'
          - '"Choices": ['
          - '{'
          - '"Variable": "$.Action",'
          - '"StringEquals": "Success",'
          - '"Next": "TransitTaskHandler"'
          - '},'
          - '{'
          - '"Variable": "$.Action",'
          - '"StringEquals": "Wait",'
          - '"Next": "Wait"'
          - '}'
          - '
          - '"Wait": {'
          - '"Type" : "Wait",'
          - '"Seconds": 60,'
          - '"Next": "CheckStackStatus"'
          - '},'


{
  "Comment": "An example of the Amazon States Language that runs an AWS Batch job and monitors the job until it completes.",
  "StartAt": "Submit Job",
  "States": {
    "Submit Job": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:106808901653:function:StepFunctionsSample-JobStatusPol-SubmitJobFunction-G3XICU0LQYIE",
      "ResultPath": "$.guid",
      "Next": "Wait X Seconds"
    },
    "Wait X Seconds": {
      "Type": "Wait",
      "SecondsPath": "$.wait_time",
      "Next": "Get Job Status"
    },
    "Get Job Status": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:106808901653:function:StepFunctionsSample-JobStatusPoll-CheckJobFunction-13A7B8ELRXV01",
      "Next": "Job Complete?",
      "InputPath": "$.guid",
      "ResultPath": "$.status"
    },
    "Job Complete?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.status",
          "StringEquals": "FAILED",
          "Next": "Job Failed"
        },
        {
          "Variable": "$.status",
          "StringEquals": "SUCCEEDED",
          "Next": "Get Final Job Status"
        }
      ],
      "Default": "Wait X Seconds"
    },
    "Job Failed": {
      "Type": "Fail",
      "Cause": "AWS Batch Job Failed",
      "Error": "DescribeJob returned FAILED"
    },
    "Get Final Job Status": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:106808901653:function:StepFunctionsSample-JobStatusPoll-CheckJobFunction-13A7B8ELRXV01",
      "InputPath": "$.guid",
      "End": true
    }
  }
}


import json
import boto3

print('Loading function')

batch = boto3.client('batch')

def lambda_handler(event, context):
    # Log the received event
    print("Received event: " + json.dumps(event, indent=2))
    # Get jobId from the event
    jobId = event['jobId']

    try:
        # Call DescribeJobs
        response = batch.describe_jobs(jobs=[jobId])
        # Log response from AWS Batch
        print("Response: " + json.dumps(response, indent=2))
        # Return the jobtatus
        jobStatus = response['jobs'][0]['status']
        return jobStatus
    except Exception as e:
        print(e)
        message = 'Error getting Batch Job status'
        print(message)
        raise Exception(message)